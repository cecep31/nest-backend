generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model post_comments {
  id                 String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at         DateTime? @db.Timestamptz(6)
  updated_at         DateTime? @db.Timestamptz(6)
  deleted_at         DateTime? @db.Timestamptz(6)
  text               String?
  post_id            String?   @db.Uuid
  parrent_comment_id BigInt?
  created_by         String?   @db.Uuid
  creator            users?    @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_post_comments_creator")
  posts              posts?    @relation(fields: [post_id], references: [id], map: "fk_posts_post_comments")
}

model posts {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at    DateTime?       @db.Timestamptz(6)
  updated_at    DateTime?       @db.Timestamptz(6)
  deleted_at    DateTime?       @db.Timestamptz(6)
  title         String?
  created_by    String?         @db.Uuid
  body          String?
  slug          String?         @unique(map: "idx_posts_slug")
  createbyid    String?         @db.VarChar(50)
  photo_url     String?
  post_comments post_comments[]
  users         users?          @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_posts_creator")
  posts_to_tags posts_to_tags[]
}

model users {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at    DateTime?       @db.Timestamptz(6)
  updated_at    DateTime?       @db.Timestamptz(6)
  deleted_at    DateTime?       @db.Timestamptz(6)
  first_name    String?         @default("pilput")
  last_name     String?         @default("admin")
  email         String          @unique(map: "idx_users_email")
  password      String?
  image         String?
  issuperadmin  Boolean?        @default(false)
  post_comments post_comments[]
  posts         posts[]
}

model posts_to_tags {
  posts_id String @db.Uuid
  tags_id  Int
  posts    posts  @relation(fields: [posts_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "posts_to_tags_posts_id_posts_id_fk")
  tags     tags   @relation(fields: [tags_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "posts_to_tags_tags_id_tags_id_fk")

  @@id([posts_id, tags_id], map: "posts_to_tags_posts_id_tags_id_pk")
}

model tags {
  id            Int             @id @default(autoincrement())
  name          String?         @unique(map: "idx_tags_name")
  posts_to_tags posts_to_tags[]
}
